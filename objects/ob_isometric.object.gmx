<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init values

X = x
Y = y
Z = 0

dX = 0
dY = 0
dZ = 0

// for collision
w1 = bbox_left   - x
w2 = bbox_right  - x
h1 = bbox_top    - y
h2 = bbox_bottom - y


isLanded = true

isKnocked = false
isKnockable = false
// knock speed
knockX = 0
knockY = 0
knockZ = 0

knockDamp = 0.5


collidedWith = noone

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// image_blend = c_white

image_blend = c_white

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce (Check collision)

var _ok = false

collidedWith = noone

if dX&lt;&gt;0 or dY&lt;&gt;0
with ob_isometric {
    if other.id != id
    if not object_is_ancestor(id.object_index, ob_picked) and not object_is_ancestor(other.id.object_index, ob_picked)
//    if other.isKnockable
    {
        if sc_isometric_collision(other.id, id) {
            id.image_blend = c_red
            other.image_blend = c_red
            break
        }
        other.X += other.dX
        if sc_isometric_collision(other.id, id) {
            // horiz collision
            other.X -= other.dX
            other.dX = 0
            _ok = true
            id.image_blend = c_lime
        }
        other.Y += other.dY
        if sc_isometric_collision(other.id, id) {
            // vert collision
            other.Y -= other.dY
            other.dY = 0
            if not _ok {
                _ok = true
                id.image_blend = c_fuchsia
            }
        }
       // collision found
        other.X -= other.dX
        other.Y -= other.dY
        if _ok {
            other.collidedWith = id
            break
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate coordinates and speeds

X += dX
Y += dY
Z += dZ

if Z &lt;= 0 {
    Z = 0
    isLanded = true
} else
    isLanded = false

dX = 0
dY = 0
dZ = 0


depth = -Y

x = X
y = Y - Z



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process knock 

if isKnocked {

    knockZ -= grav
    if Z &lt; 0 {
        knockZ = 0
    }

    if isLanded {
        knockX *= knockDamp
        knockY *= knockDamp
    }    
    
    if (abs(knockX)&lt;0.05) and (abs(knockY)&lt;0.05) and  ((abs(knockZ)&lt;0.05) and isLanded) {
        knockX = 0
        knockY = 0
        knockZ = 0
        isKnocked = false
    }
   
}

dX += knockX
dY += knockY
dZ += knockZ

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check collision

collidedWith = noone

with ob_isometric {
    if other.id != id
    if sc_isometric_collision(other.id, id) {
        other.collidedWith = id
        break
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw shadow

draw_sprite(sp_shadow, 0, X, Y+sprite_height*0.5 )

draw_self()

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
