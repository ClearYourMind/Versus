<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player_walk_dn</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init values

// directions
enum d {  
    Left,
    Right,
    Up,
    Down
}

// poses
enum p {
    Stand,
    Walk
}

// controls
ctrlKeys = 0
ctrlKeys[k.Left ] = vk_left
ctrlKeys[k.Right] = vk_right
ctrlKeys[k.Up   ] = vk_up
ctrlKeys[k.Down ] = vk_down
ctrlKeys[k.Shoot] = vk_numpad0

// pressed keys
Keys = 0

dir = d.Down
moveSpeed = 1

pose = p.Stand

// current walk speed
walkX = 0
walkY = 0

weapon = noone


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process input

Keys[k.Left ] =  keyboard_check(ctrlKeys[k.Left ])
Keys[k.Right] =  keyboard_check(ctrlKeys[k.Right])
Keys[k.Up   ] =  keyboard_check(ctrlKeys[k.Up   ])
Keys[k.Down ] =  keyboard_check(ctrlKeys[k.Down ])
Keys[k.Shoot] =  keyboard_check(ctrlKeys[k.Shoot])


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control player

if Keys[k.Left] {
    dir = d.Left
    walkX = -moveSpeed
    walkY = 0
} else
if Keys[k.Right] {
    dir = d.Right
    walkX = moveSpeed
    walkY = 0
} else
if Keys[k.Up] {
    dir = d.Up
    walkX = 0
    walkY = -moveSpeed
} else
if Keys[k.Down] {
    dir = d.Down
    walkX = 0
    walkY = moveSpeed
} else {
// no walk key presssed
    walkX = 0
    walkY = 0
}

// Set pose
if (walkX = 0) and (walkY = 0) 
    pose = p.Stand
else
    pose = p.Walk
    

// Set sprite        

switch pose {
case p.Stand:
    image_speed = 0
    image_index = 0
    break
case p.Walk:
    image_speed = 0.2
    break
}

switch dir {
case d.Left:
    sprite_index = sp_player_walk_lt
    break
case d.Right:
    sprite_index = sp_player_walk_rt
    break
case d.Up:
    sprite_index = sp_player_walk_up
    break
case d.Down:
    sprite_index = sp_player_walk_dn
    break
}

    
    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move player

x += walkX
y += walkY
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Carry weapon

var _wx, _xy, _wd;

if instance_exists(weapon) {
    switch dir {
    case d.Left:
        _wx = -10
        _wy = -3
        _wd  = 0
        break;
    case d.Right:
        _wx = 10
        _wy = -3
        _wd  = 0
        break;
    case d.Up:
        _wx = 0
        _wy = -5
        _wd  = 1
        break;
    case d.Down:
        _wx = 0
        _wy = 10
        _wd  = -1
        break;
    }
    
    weapon.x = x + _wx
    weapon.y = y + _wy
    weapon.depth = depth + _wd
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_barrel">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pick up

_weap = other.id
if _weap.readyToPick
if not instance_exists(weapon) {
    weapon = _weap
    weapon.readyToPick = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
